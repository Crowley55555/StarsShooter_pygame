# utils.py
import pygame
import os
from settings import ASSETS_DIR, SOUNDS_DIR


def load_image(name, size=None):
    """
    Загружает изображение из файла и преобразует его в формат с прозрачностью.

    :param name: Имя файла изображения (например, 'player.png').
    :param size: Размер изображения в виде кортежа (ширина, высота). Если не указано, изображение остается исходного размера.
    :return: Загруженное изображение, готовое к использованию в игре.

    Логика метода:
    1. Строит полный путь к файлу изображения, используя директорию ресурсов (`ASSETS_DIR`) и имя файла.
    2. Проверяет существование файла. Если файл не найден, вызывает ошибку `FileNotFoundError`.
    3. Загружает изображение с поддержкой прозрачности (`convert_alpha`).
    4. Если указан параметр `size`, изменяет размер изображения с помощью `pygame.transform.scale`.
    """
    full_path = os.path.join(ASSETS_DIR, name)  # Строим полный путь к файлу изображения
    if not os.path.exists(full_path):  # Проверяем, существует ли файл
        raise FileNotFoundError(f"No such file or directory: '{full_path}'")
    image = pygame.image.load(full_path).convert_alpha()  # Загружаем изображение с поддержкой прозрачности
    if size:  # Если указан размер, изменяем размер изображения
        image = pygame.transform.scale(image, size)
    return image  # Возвращаем загруженное изображение


def load_sound(name):
    """
    Загружает звуковой файл для использования в игре.

    :param name: Имя файла звука (например, 'shoot.wav').
    :return: Загруженный звуковой объект, готовый к воспроизведению.

    Логика метода:
    1. Строит полный путь к файлу звука, используя директорию звуков (`SOUNDS_DIR`) и имя файла.
    2. Проверяет существование файла. Если файл не найден, вызывает ошибку `FileNotFoundError`.
    3. Загружает звуковой файл с помощью `pygame.mixer.Sound`.
    """
    full_path = os.path.join(SOUNDS_DIR, name)  # Строим полный путь к файлу звука
    if not os.path.exists(full_path):  # Проверяем, существует ли файл
        raise FileNotFoundError(f"No such file or directory: '{full_path}'")
    sound = pygame.mixer.Sound(full_path)  # Загружаем звуковой файл
    return sound  # Возвращаем загруженный звуковой объект


def load_explosion_frames(prefix, num_frames, size=None):
    """
    Загружает последовательность изображений для анимации взрыва.

    :param prefix: Префикс имени файлов изображений (например, 'explosion_lg').
    :param num_frames: Количество кадров в анимации.
    :param size: Размер каждого кадра в виде кортежа (ширина, высота). Если не указано, кадры остаются исходного размера.
    :return: Список загруженных кадров анимации.

    Логика метода:
    1. Создает пустой список для хранения кадров анимации.
    2. Для каждого номера кадра (от 1 до `num_frames`) строит имя файла (например, 'explosion_lg_1.png').
    3. Загружает каждый кадр с помощью функции `load_image`.
    4. Если указан параметр `size`, изменяет размер каждого кадра.
    5. Добавляет загруженный кадр в список анимации.
    """
    frames = []  # Создаем пустой список для хранения кадров анимации
    for i in range(1, num_frames + 1):  # Проходим по всем номерам кадров
        filename = f"{prefix}_{i}.png"  # Строим имя файла для текущего кадра
        frame = load_image(filename, size)  # Загружаем кадр с указанным размером
        frames.append(frame)  # Добавляем загруженный кадр в список
    return frames  # Возвращаем список всех кадров анимации